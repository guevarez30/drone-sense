{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSession = void 0;\nconst SessionContext_1 = require(\"../contexts/SessionContext\");\n/**\n * Returns the current auth state and if a session exists, the session object.\n *\n * Until Clerk loads and initializes, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access `isSignedIn` state and `session`.\n *\n * For projects using NextJs or Remix, you can make this state available during SSR\n * simply by using the `withServerSideAuth` helper and setting the `loadSession` flag to `true`.\n *\n * @example\n * A simple example:\n *\n * import { useSession } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, session } = useSession();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *   return <div>{session.updatedAt}</div>\n * }\n *\n * @example\n * Basic example in a NextJs app. This page will be fully rendered during SSR:\n *\n * import { useSession } from '@clerk/nextjs'\n * import { withServerSideAuth } from '@clerk/nextjs/api'\n *\n * export getServerSideProps = withServerSideAuth({ loadSession: true});\n *\n * export HelloPage = () => {\n *   const { isSignedIn, session } = useSession();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *  return <div>{session.updatedAt}</div>\n * }\n */\nconst useSession = () => {\n  const session = (0, SessionContext_1.useSessionContext)();\n  if (session === undefined) {\n    return {\n      isLoaded: false,\n      isSignedIn: undefined,\n      session: undefined\n    };\n  }\n  if (session === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      session: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    session\n  };\n};\nexports.useSession = useSession;","map":{"version":3,"names":["Object","defineProperty","exports","value","useSession","SessionContext_1","require","session","useSessionContext","undefined","isLoaded","isSignedIn"],"sources":["/home/taylorguevarez/code/clerk/app/node_modules/@clerk/clerk-react/dist/hooks/useSession.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSession = void 0;\nconst SessionContext_1 = require(\"../contexts/SessionContext\");\n/**\n * Returns the current auth state and if a session exists, the session object.\n *\n * Until Clerk loads and initializes, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access `isSignedIn` state and `session`.\n *\n * For projects using NextJs or Remix, you can make this state available during SSR\n * simply by using the `withServerSideAuth` helper and setting the `loadSession` flag to `true`.\n *\n * @example\n * A simple example:\n *\n * import { useSession } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, session } = useSession();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *   return <div>{session.updatedAt}</div>\n * }\n *\n * @example\n * Basic example in a NextJs app. This page will be fully rendered during SSR:\n *\n * import { useSession } from '@clerk/nextjs'\n * import { withServerSideAuth } from '@clerk/nextjs/api'\n *\n * export getServerSideProps = withServerSideAuth({ loadSession: true});\n *\n * export HelloPage = () => {\n *   const { isSignedIn, session } = useSession();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *  return <div>{session.updatedAt}</div>\n * }\n */\nconst useSession = () => {\n    const session = (0, SessionContext_1.useSessionContext)();\n    if (session === undefined) {\n        return { isLoaded: false, isSignedIn: undefined, session: undefined };\n    }\n    if (session === null) {\n        return { isLoaded: true, isSignedIn: false, session: null };\n    }\n    return { isLoaded: true, isSignedIn: true, session };\n};\nexports.useSession = useSession;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,UAAU,GAAGA,CAAA,KAAM;EACrB,MAAMG,OAAO,GAAG,CAAC,CAAC,EAAEF,gBAAgB,CAACG,iBAAiB,GAAG;EACzD,IAAID,OAAO,KAAKE,SAAS,EAAE;IACvB,OAAO;MAAEC,QAAQ,EAAE,KAAK;MAAEC,UAAU,EAAEF,SAAS;MAAEF,OAAO,EAAEE;IAAU,CAAC;EACzE;EACA,IAAIF,OAAO,KAAK,IAAI,EAAE;IAClB,OAAO;MAAEG,QAAQ,EAAE,IAAI;MAAEC,UAAU,EAAE,KAAK;MAAEJ,OAAO,EAAE;IAAK,CAAC;EAC/D;EACA,OAAO;IAAEG,QAAQ,EAAE,IAAI;IAAEC,UAAU,EAAE,IAAI;IAAEJ;EAAQ,CAAC;AACxD,CAAC;AACDL,OAAO,CAACE,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}